extend type Query {
  "Gets all shops available on an installation of Reaction"
  availableShops(
    "Return at most this many results. This parameter may be used with either `after` or `offset` parameters."
    first: ConnectionLimitInt,

    "Return at most this many results. This parameter may be used with the `before` parameter."
    last: ConnectionLimitInt,

    "Return only results that come after the Nth result. This parameter may be used with the `first` parameter."
    offset: Int
  ): ShopConnection
}

extend type Shop {
    "The date the shop was created"
    createdAt: DateTime!

    "The shop owner's full name"
    owner: String

    "The amount of products that the shop contains"
    productCount: Int
}

"A connection edge in which each node is a `Shop` object"
type ShopEdge {
    "The cursor that represents this node in the paginated results"
    cursor: ConnectionCursor!

    "The shop"
    node: Shop
}

"""
Wraps a list of `Shop`s, providing pagination cursors and information.
"""
type ShopConnection {
    "The list of nodes that match the query, wrapped in an edge to provide a cursor string for each"
    edges: [ShopEdge]

    """
    You can request the `nodes` directly to avoid the extra wrapping that `NodeEdge` has,
    if you know you will not need to paginate the results.
    """
    nodes: [Shop]
    "Information to help a client request the next or previous page"
    pageInfo: PageInfo!
    "The total number of nodes that match your query"
    totalCount: Int!
}